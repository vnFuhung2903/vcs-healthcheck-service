// Code generated by MockGen. DO NOT EDIT.
// Source: E:\Code\VCS\vcs-passport-checkpoint\vcs-healthcheck-service\interfaces\kafka_producer.go

// Package interfaces is a generated GoMock package.
package interfaces

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kafka "github.com/segmentio/kafka-go"
	dto "github.com/vnFuhung2903/vcs-healthcheck-service/dto"
)

// MockIKafkaProducer is a mock of IKafkaProducer interface.
type MockIKafkaProducer struct {
	ctrl     *gomock.Controller
	recorder *MockIKafkaProducerMockRecorder
}

// MockIKafkaProducerMockRecorder is the mock recorder for MockIKafkaProducer.
type MockIKafkaProducerMockRecorder struct {
	mock *MockIKafkaProducer
}

// NewMockIKafkaProducer creates a new mock instance.
func NewMockIKafkaProducer(ctrl *gomock.Controller) *MockIKafkaProducer {
	mock := &MockIKafkaProducer{ctrl: ctrl}
	mock.recorder = &MockIKafkaProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIKafkaProducer) EXPECT() *MockIKafkaProducerMockRecorder {
	return m.recorder
}

// AddMessage mocks base method.
func (m *MockIKafkaProducer) AddMessage(msg dto.KafkaStatusUpdate) (kafka.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessage", msg)
	ret0, _ := ret[0].(kafka.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMessage indicates an expected call of AddMessage.
func (mr *MockIKafkaProducerMockRecorder) AddMessage(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessage", reflect.TypeOf((*MockIKafkaProducer)(nil).AddMessage), msg)
}

// Produce mocks base method.
func (m *MockIKafkaProducer) Produce(ctx context.Context, msgs []kafka.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", ctx, msgs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockIKafkaProducerMockRecorder) Produce(ctx, msgs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockIKafkaProducer)(nil).Produce), ctx, msgs)
}
