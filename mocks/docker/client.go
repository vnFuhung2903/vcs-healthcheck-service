// Code generated by MockGen. DO NOT EDIT.
// Source: E:\Code\VCS\vcs-passport-checkpoint\vcs-healthcheck-service\pkg\docker\client.go

// Package docker is a generated GoMock package.
package docker

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/vnFuhung2903/vcs-healthcheck-service/entities"
)

// MockIDockerClient is a mock of IDockerClient interface.
type MockIDockerClient struct {
	ctrl     *gomock.Controller
	recorder *MockIDockerClientMockRecorder
}

// MockIDockerClientMockRecorder is the mock recorder for MockIDockerClient.
type MockIDockerClientMockRecorder struct {
	mock *MockIDockerClient
}

// NewMockIDockerClient creates a new mock instance.
func NewMockIDockerClient(ctrl *gomock.Controller) *MockIDockerClient {
	mock := &MockIDockerClient{ctrl: ctrl}
	mock.recorder = &MockIDockerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDockerClient) EXPECT() *MockIDockerClientMockRecorder {
	return m.recorder
}

// GetIpv4 mocks base method.
func (m *MockIDockerClient) GetIpv4(ctx context.Context, containerID string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIpv4", ctx, containerID)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIpv4 indicates an expected call of GetIpv4.
func (mr *MockIDockerClientMockRecorder) GetIpv4(ctx, containerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIpv4", reflect.TypeOf((*MockIDockerClient)(nil).GetIpv4), ctx, containerID)
}

// GetStatus mocks base method.
func (m *MockIDockerClient) GetStatus(ctx context.Context, containerID string) entities.ContainerStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx, containerID)
	ret0, _ := ret[0].(entities.ContainerStatus)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockIDockerClientMockRecorder) GetStatus(ctx, containerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockIDockerClient)(nil).GetStatus), ctx, containerID)
}
