// Code generated by MockGen. DO NOT EDIT.
// Source: E:\Code\VCS\vcs-passport-checkpoint\vcs-healthcheck-service\usecases\services\healthcheck.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/vnFuhung2903/vcs-healthcheck-service/dto"
)

// MockIHealthcheckService is a mock of IHealthcheckService interface.
type MockIHealthcheckService struct {
	ctrl     *gomock.Controller
	recorder *MockIHealthcheckServiceMockRecorder
}

// MockIHealthcheckServiceMockRecorder is the mock recorder for MockIHealthcheckService.
type MockIHealthcheckServiceMockRecorder struct {
	mock *MockIHealthcheckService
}

// NewMockIHealthcheckService creates a new mock instance.
func NewMockIHealthcheckService(ctrl *gomock.Controller) *MockIHealthcheckService {
	mock := &MockIHealthcheckService{ctrl: ctrl}
	mock.recorder = &MockIHealthcheckServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHealthcheckService) EXPECT() *MockIHealthcheckServiceMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockIHealthcheckService) Update(ctx context.Context, batch []dto.StatusUpdate, interval time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, batch, interval)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIHealthcheckServiceMockRecorder) Update(ctx, batch, interval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIHealthcheckService)(nil).Update), ctx, batch, interval)
}
